//
//         This is a simple server that handles LSP requests.
// Don't actually use this: we don't return any proper responses for now since
// we don't have a mechanism to properly free all the memory used by the internal
// compiler, and so this would leak memory like crazy if we kept it running.
//
// Instead, use the `lsp.py` script for the VSCode client, and `find.ae` for the actual
// aecor backend that handles each request and outputs the info to the terminal.
//

use "lib/json.ae"
use "lib/buffer.ae"
use "@/bindings.ae"

struct LSPServer {
    client: i32 // file descriptor
    file_content: string
    file_path: string
}

def LSPServer::make(client: i32): LSPServer {
    let server: LSPServer
    server.client = client
    return server
}

const DEBUG = false

def LSPServer::read_message(&this): &Value {
    let buf = calloc(8192, 1) as string

    let count = read(.client, buf, 1024)
    if count <= 0 return null
    buf[count] = '\0'

    let cur = buf
    let content_len = 0
    let parsed_len = 0

    // Read the header...
    let header_line = 0
    while true {
        let line = strsep(&cur, "\n")
        let len = line.len()
        parsed_len += len + 1

        if len < 2 {
            break
        }
        header_line += 1
        // Pesky carriage returns
        line[len-1] = '\0'
        if DEBUG println("Header line: %s", line)
        if line.starts_with("Content-Length: ") {
            let num_start = &line[16]
            content_len = num_start.to_i32()
        }
    }

    if DEBUG println("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$")
    if DEBUG println("Content-Length: %d", content_len)
    if DEBUG println("parsed_len: %d", parsed_len)
    if DEBUG println("Initial header lines: %d", header_line)
    if DEBUG println("first read had %d bytes", count)
    if DEBUG println("remaining unparsed bytes: %d", count - parsed_len)
    if DEBUG println("remaining bytes to read: %d", content_len - (count - parsed_len))
    if DEBUG println("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$")

    let remaining = content_len - (count - parsed_len)
    let bufp = buf + count
    while remaining > 0 {
        let read_count = read(.client, bufp, remaining)
        if read_count <= 0 return null
        bufp = bufp + read_count
        remaining -= read_count
    }


    let json_text = strsep(&cur, "\n")
    if DEBUG println("JSON text: %s", json_text)
    if DEBUG println("")

    // Let's parse the JSON!
    let json = JSON::parse_from_string(json_text)

    // Clean up memory
    free(buf)
    return json
}

def LSPServer::send_message(&this, json: &Value) {
    let json_text = JSON::serialize(json)
    let json_len = json_text.size

    let resp = Buffer::make()
    resp.puts("Content-Type: application/vscode-jsonrpc; charset=utf-8\r\n")
    resp.putsf(`Content-Length: {json_len}\r\n`)
    resp.puts("\r\n")
    resp.putb(&json_text)
    write(.client, resp.data, resp.size)

    if DEBUG println("Responded with:\n'''%s\n'''", resp.data)

    // Clean up the data as well as the JSON Dictionary
    free(resp.data)
    json.free()
}

def LSPServer::create_base(&this, request: &Value, inner: &Value): &Value {
    let base = Value::new(Dictionary)
    base.insert("jsonrpc", Value::new_str("2.0"))
    base.insert("id", request.get("id"))
    base.insert("result", inner)
    return base
}

def LSPServer::create_base_err(&this, request: &Value, err: &Value): &Value {
    let base = Value::new(Dictionary)
    base.insert("jsonrpc", Value::new_str("2.0"))
    base.insert("id", request.get("id"))
    base.insert("error", err)
    return base
}

def LSPServer::handle_initialize(&this, request: &Value): bool {
    println("[LSP] Got initialize request")

    let server_info = Value::new(Dictionary)
    server_info.insert("name", Value::new_str("ae-lsp-server"))
    server_info.insert("version", Value::new_str("0.1"))

    let capabilities = Value::new(Dictionary)
    capabilities.insert("hoverProvider", Value::new_bool(true))

    let response = Value::new(Dictionary)
    response.insert("serverInfo", server_info)
    response.insert("capabilities", capabilities)

    .send_message(.create_base(request, response))
    return true
}

def LSPServer::handle_initialized(&this, request: &Value): bool {
    println("[LSP] Got initialized confirmation")
    // .send_message(.create_base(request, Value::new(Null)))
    return true
}

def LSPServer::handle_hover(&this, request: &Value): bool {
    println("[LSP] Got hover request")
    let file = request.get("params").get("textDocument").get("uri").as_str()
    let position = request.get("params").get("position")
    let line = position.get("line").as_num()
    let character = position.get("character").as_num()

    println(`[LSP-INFO] Hover request for {file}:{line}:{character}`)

    let str = `Line {line}, char {character}`
    let contents = Value::new_str(str)

    let response = Value::new(Dictionary)
    response.insert("contents", contents)
    .send_message(.create_base(request, response))

    free(str)
    return true
}


def LSPServer::handle_did_open_text(&this, request: &Value): bool {
    println("[LSP] Got did open text document request")

    let document = request.get("params").get("textDocument")
    .file_path = document.get("uri").as_str().copy()
    .file_content = document.get("text").as_str().copy()

    println(`[LSP] Opened file {.file_path}`)

    .send_message(.create_base(request, Value::new(Null)))
    return true
}

def LSPServer::handle_completion(&this, request: &Value): bool {
    println("[LSP] Got completion request")
    let position = request.get("params").get("position")
    let line = position.get("line").as_num()
    let character = position.get("character").as_num()
    println(`[LSP] Completion at line {line}, character {character}`)

    let item = Value::new(Dictionary)
    item.insert("label", Value::new_str("foo"))
    item.insert("detail", Value::new_str("A variable named foo, lmao"))

    let completions = Value::new(List)
    completions.push(item)

    let completion_list = Value::new(Dictionary)
    completion_list.insert("isIncomplete", Value::new_bool(false))
    completion_list.insert("items", completions)

    .send_message(.create_base(request, completion_list))
    return true;
}

def LSPServer::handle_shutdown(&this, request: &Value): bool {
    println("[LSP] Got shutdown request")
    .send_message(.create_base(request, Value::new(Null)))
    return true
}

def LSPServer::handle_exit(&this, request: &Value): bool {
    println("[LSP] Got exit request")
    .send_message(.create_base(request, Value::new(Null)))
    return true
}

def LSPServer::handle(&this) {
    let running = true
    while running {
        let request = .read_message()
        if not request? {
            println("[LSP] Error reading message / connection closed")
            break
        }

        let method = request.get("method").as_str()

        running = match method {
            "initialize" => .handle_initialize(request)
            "initialized" => .handle_initialized(request)
            "textDocument/hover" => .handle_hover(request)
            "textDocument/didOpen" => .handle_did_open_text(request)
            "textDocument/completion" => .handle_completion(request)
            "shutdown" => .handle_shutdown(request)
            "exit" => .handle_exit(request)
            else => {
                yield if method.starts_with("$/") {
                    println("[!!! LSP] Ignoring %s notification", method)
                    yield true
                } else {
                    println("Unknown method: '%s', exiting", method)
                    yield false
                }
            }
        }
        free(request) 
        println("----------------------------------------------------\n")
    }
    println("[LSP] Exiting")
}

def main() {
    let listenfd = socket(AF_INET, SOCK_STREAM, 0)

    let serv_addr: SockAddrIn
    memset(&serv_addr, 0, sizeof(SockAddrIn))
    serv_addr.sin_family = AF_INET
    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY)
    serv_addr.sin_port = htons(3333)

    bind(listenfd, (&serv_addr) as &SockAddr, sizeof(SockAddrIn))
    listen(listenfd, 10)

    println("[LSP] Listening on port 3333")

    let connfd = accept(listenfd, null, null);

    println("[LSP] Accepted connection from %d", connfd)

    let server = LSPServer::make(connfd)
    server.handle()

    close(connfd)
}